#------------------------------------------------------------------------------
# Name:        Tex2RTF.ini
# Purpose:     Settings to generate a wxHTMLHelpController file and MSW .chm help file.
#              from the LaTeX (.txt) document using the Tex2RTF application that comes
#              with a wxWindows distribution.
# Author:      Robert O'Connor
# Modified by:
# Created:     2001/10/20
# Copyright:   (c) Robert O'Connor
# Licence:     GPL
# RCS-ID:      $Id: Tex2Rtf.ini,v 1.9 2003/03/09 01:40:00 robertoconnor Exp $
#
#------------------------------------------------------------------------------

# To use this file to build the Plucker Desktop online help, by using the Tex2RTF.exe 
# application that comes with wxWindows, there are two options.
#
# Option A: Use the makefile. There is a section for making the docs automatically.
#
# Option B: By hand:
# (1) Start Tex2RTF GUI.
# (2) From Tex2RTF menu select "Macros>Load custom macros" and choose this file
#     (Tex2RTF.ini). It will generate some messages saying that it initializaed OK, as 
#     well as show all the macros loaded.
#     Note: need to choose that menu command from Tex2RTF GUI each time before converting
#     a .tex file. Docs say can just leave in the same directory as the .tex file to
#     convert, but after first run, seems to forget what the macros do, and will
#     just output blankness.
# (3) From the menu, select 'File>Set Input File' and set the input file to the LaTex file
#     to convert, likely PluckerDesktop.tex or something similar.
# (4) From the menu, select 'File>Set Output File' and type in plucker-desktop.html
# (5) From the menu, select 'File>Go'. A number of .html documents, plus some .con files
#     .hhp/.hhc/.hhk are created.
# (6) Put all the outputted files into a single zip file and rename the zip file to
#     plucker-desktop.htb
#     [.htb stands for *h*yper*t*ext *b*ook, and is the archive used by the
#     wxHtmlHelp controller in wxWindows].
# (7) Leave your generated .htb file in the plucker-desktop/resource/help directory
#     (ie where you found this file) and take a look at it from within Plucker by
#     clicking on the Help buttons at the bottom of the dialogs.

#----------------------------------------------------------------------------------------

# Specifies conversion mode to output HTML, instead of RTF or others.

conversionMode=HTML


# Tells the compiler what type of buttons to include at the top of every
# outputted HTML page. These buttons may be redundant since already have some
# in the HTML viewer. Can turn on images or text links if want the pages to
# be naviagatable in a regular web browser too. If use the bitmaps, then have
# these 4 images sitting in the folder where the html output will be:
# contents.gif, up.gif, back.gif and forward.gif
# Note that the wxHTML rendering is *much* slower with images: has to first load
# the from the zip, then render the four images (which takes a long time).
# I would highly recommend using 'none' for htmBrowseButtons, and instead use
# the side panel and the top toolbar buttons on the wxHtmlHelpController dialog
# for any navigation.

htmlBrowseButtons=none
#htmlBrowseButtons=bitmap
#htmlBrowseButtons=text


# Generates the 3 files needed to make a wxHTMLHelp controller file or a
# MS Windows .chm help file. These 3 files serve to organize the large set of
# .html files
#
# (1) .hhp (*h*tml *h*elp *p*roject): The project file with global settings
# of the group of files.
#
# (2) .hhc (*h*tml *h*elp *c*ontents): An XML like document to describe the
# tree widget organization of the help in the "Contents" navigation pane.
#
# (3) .hhk (*h*tml *h*elp *k*eywords): The index file of keywords.
# Since keywords are really redundant in the wxHTMLHelpController
# since there is already a search facility to search the words, keywords
# are built and used in a different way.
# -If two parameters are both set:
#   (1) A /makeindex% command is somewhere in the input LateX file, and
#   (2) The htmlIndex=true (shown below) is in the .ini file
#  then Tex2RTF generates a flat version of all section, subsection, and
#  subsubsection names as the entries in the .hhk file (otherwise the .hhk
#  would have no entries).
# -This is now very useful, since can then call a Display() on the helpfile
#  to jump to a topic based on what its section name was in the original LaTex file.
#  For example, the part that was called \section{Credits} in the Latex file
#  can be called up from inside the wxWindows application simply by the function
#  the_help_controller->Display("Credits");
#  In the plucker-desktop project, see help_controller.cpp, help_controller.h
#  and install_dialog for how it works. #defines were used in case a different
#  system is used in the future.

htmlIndex=true
htmlWorkshopFiles=true


# This does/doesn't combine the subsections of a section in the LaTex file,
# into a single HTML file for a subsection, instead of an HTML file for each
# subsection. Subsections are given anchor names within the section.htm file.
# For example plucker-desktop06.html#mysubsection

combineSubSections=false


# The Tex2RTF compiler needs to run twice, to replace some things correctly.
# You will notice that in the Tex2RTF window, the first pass will say
# Warning: unresolved reference 'pd-editor-dialog'
# but pass #2 will run without any warnings.

runTwice=true


# Better LaTex compatibility

compatibility=true


#----------------------------------------------------------------------------------------
# Tex2RTF Notes:
#----------------------------------------------------------------------------------------
# To set the title next to the book icon in the sidepanel, include a title command at
# the top of the latex document, for example:
#\title{Plucker Desktop}


#----------------------------------------------------------------------------------------
#---------End of generic settings, start of Plucker Desktop specific macros--------------
#----------------------------------------------------------------------------------------
# These are just shortcuts used in the Plucker LaTex documents. For example instead
# of writing \tt{mysentence} can write \code{mysentence} and the macro will replace
# it with \tt{mysentence} during the conversion. Purpose of these is to make the
# document more logical. That is, \tt is a description of to render some text,
# but \code tells the logical structure of the document.

#----------------------------------------------------------------------------------------
# Start branding
#----------------------------------------------------------------------------------------

\brandingapplicationdesktopname  [0] {Plucker Desktop}
\brandingapplicationsuitename    [0] {Plucker}
\brandingapplicationpublisherurl [0] {www.plkr.org}

#----------------------------------------------------------------------------------------
# End branding
#----------------------------------------------------------------------------------------

\helplink           [2]{\bf{\helpref{#1}{#2}}}
\code               [1]{\definecolour{darkgray}{102}{102}{102}\fcol{darkgray}{\tt{\bf{#1}}}}
\desktopcontrol     [1]{\definecolour{lightblue}{51}{102}{153}\bf{\fcol{lightblue}{#1}}}
\desktopmenuitem    [1]{\definecolour{darkblue}{51}{102}{199}\bf{\fcol{darkblue}{#1}}}
\viewercontrol      [1]{\definecolour{darkgray}{102}{102}{102}\bf{\fcol{darkgray}{#1}}}
\todo               [1]{\em{#1}}
\configkey          [1]{\code{#1}}
\end                [1]{}
\notimplemented     [0]{\definecolour{chinesered}{255}{0}{0}\fcol{chinesered}{\bf{This feature is not yet implemented}}}
\advancedtip        [1]{\definecolour{darkgray}{102}{102}{102}\fcol{darkgray}{\bf{Power user tip: }#1}}
\basictip           [1]{\definecolour{darkgray}{102}{102}{102}\fcol{darkgray}{\bf{Beginner tip: }#1}}

\regexcommand       [1]{\definecolour{lightblue}{51}{102}{153}\bf{\tt{\fcol{lightblue}{#1}}}}
\regexsample        [1]{\definecolour{lightblue}{51}{102}{153}\bf{\tt{\fcol{lightblue}{#1}}}}

\htmladdnormallink  [2]{\code{#1}{}}

\devaddress         [0]{\code{plucker-dev@rubberchicken.org}}


