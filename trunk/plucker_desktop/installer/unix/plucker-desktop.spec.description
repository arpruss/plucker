#------------------------------------------------------------------------------
# Name:        plucker-desktop.spec
# Purpose:     File to specify an installation of the application using 
#              Redhat's Package Manager ( a "spec" file ).
# Author:      Robert O'Connor
# Modified by:
# Created:     2002/07/07
# Copyright:   (c) Robert O'Connor ( rob@medicalmnemonics.com )
# Licence:     GPL
# RCS-ID:      $Id: plucker-desktop.spec.description,v 1.1 2002/07/16 20:45:24 robertoconnor Exp $
#------------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Defines section
# Purpose: These three macros will get used throughout the spec file.
# Notes:
#  (1) It seems that name, version and release defines can also be made
#      automatically from the relevant Information section parts.
#-----------------------------------------------------------------------------

# Name of the package
%define name plucker-desktop
   
# Version of the package
%define version 1.2beta11

# Release number
%define release 1

#-----------------------------------------------------------------------------
# Information section
# Purpose: Some meta informations to summarize the package.
#-----------------------------------------------------------------------------

# Name of the package (autogenerated from your define)
Name: %{name}

# Version (autogenerated from your define)
Version: %{version}

# Release (autogenerated from your define)
Release: %{release}

# A one line summary of the package
Summary: Visual GUI management for the command-line tools of Plucker (the Free offline web browser for handhelds)

# The license that is distributed under.
License: GPL

# The homepage of the package
URL: http://www.plkr.org/

# Give the GUI RPM "tree" package tools a hint of where to place it in the
# tree of pakcages. "None" will just put it at the bottom. Redhat apparently
# maintains an official guide to where it should go in the package tree.
# To put it in subbranch, use forward slashes. For example Communication/Palm
# would make it appear in the heirarchy as:
# RPM
# |
# +---Communication
#     |
#     +----Palm
# Note that this has nothing to do with installation of files or anything
# it is just a hint to the GUI package management tools of where to 
# put it their tree.
Group: None

# Tell the package manager what other packages need to be installed
# before this one, in order for the current package to be useful.
# This app needs the plucker package to do anything constructive.
# You can add additional requirements as far as greater than a certain
# version, etc.
Requires: plucker

# Build requirements. This isn't being something important
#BuildPrereq:

# The source filename to use, which will be a bzip2. Filename
# generation uses the macros above.
# This can also be a URL, like this:
# http://download.sourceforge.net/heroes/%{name}-%{version}.tar.gz
Source: %{name}-%{version}.tar.bz2
#Source1: %{name}_bin-%{version}.tar.bz2

# Give the install and compilation a valid temporary path for building.
# This temporary path may end up be something like 
#"/var/tmp/plucker-desktop1.2.3-buildroot"
# It goes in the /tmp folder since user probably won't have root access
BuildRoot: %{_tmppath}/%{name}-%{version}-buildroot

# An optional icon for the application. 
# Icon: %{buildroot}/resource/icons_application/plucker-desktop.xpm


#-----------------------------------------------------------------------------
# Description section:
# Purpose: Provides a long description of the file.
# Notes:
#  (1) Each empty line starts a new paragraph.
#-----------------------------------------------------------------------------
%description
#-Section instructions:-------------------------------------------------------
Plucker Desktop is a visual content management GUI for Plucker, the popular 
suite of tools that provides an offline webbrowser for handheld devices. 
Plucker Desktop allows you to configure and use Plucker within 
a visual desktop interface. You can use your mouse to quickly add and 
configure channels and send them to the handheld. 

Plucker Desktop provides:
visual configuration of all the latest parameters for Plucker;
interactive wizards to setup Plucker, install software and add new channels;
autoupdate capability to update individual channels at specified intervals;
drag-and-drop and clipboard support;
a point-and-click showcase of preconfigured Plucker channels which can be instantly added;
installing channel output to selected handhelds or directories;
easy visual editing of exclusion lists;
an integrated editor/previewer for all Plucker tags;
visual progress feedback of channel updating;
use of the graphical interface in multiple translated languages;
extensive context-sensitive help throughout.


#-----------------------------------------------------------------------------
# Prep section
# Purpose: Things to do before unzipping the archive
# Notes:
#   (1) Unlikely to need anything here.
#-----------------------------------------------------------------------------
#%prep
#-Section instructions:-------------------------------------------------------


#-----------------------------------------------------------------------------
# Setup section
# Purpose: Things to do get ready for building.
#   -The '-q' flag after the setup command runs it quietly.
#-----------------------------------------------------------------------------
%setup -q
#-Section instructions:-------------------------------------------------------

tar -xIf %{_sourcedir}/%{name}-%{version}.tar.bz2
#cp -r %{name}-%{version}/viewer/* viewer/
#cp -r %{name}-%{version}/docs/* docs/


#-----------------------------------------------------------------------------
# Build section
# Purpose: Builds the application from the source.
# Notes: Often this is a configure then a make.
#-----------------------------------------------------------------------------
#%build
#-Section instructions:-------------------------------------------------------

#-----------------------------------------------------------------------------
# Install section
# Purpose: Things to do to install the app
# Notes:
#  (1) Often this will be the "install:" portion of the makefile
#-----------------------------------------------------------------------------
%install
#-Section instructions:-------------------------------------------------------

# Get rid of any cruft that was in the build directory leftover from 
# a previous install. "-rf" means recurse and force.
rm -rf %{buildroot}
mkdir %{buildroot}

# Execute the "install" portion of the Makefile-wx-standalone file.
# Pass it a DESTDIR flag so it can build the tree in the buildroot.
make -f Makefile-wx-standalone DESTDIR=%{buildroot} install

#-----------------------------------------------------------------------------
# Clean section
# Purpose: Gets rid of itself after the install is finished
# Notes: 
#  (1) Often this will be the command: 
#      rm -rf %{buildroot}
#      or its equivalent using the similar RPM macro:
#      rm -rf $RPM_BUILD_ROOT
#      to remove the entire temporary tree that we used for the install.
#-----------------------------------------------------------------------------
%clean
#-Section instructions:-------------------------------------------------------

rm -rf %{buildroot}


#-----------------------------------------------------------------------------
# Files section
# Purpose: A list of the files that are part of the package
# Notes: 
#  (1) These files are compiled into the binary RPM.
#  (2) You can wildcards anywhere in the paths to describe a group of files.
#  (3) This file list usually also appears in the GUI package managers
#-----------------------------------------------------------------------------
%files
#-Section instructions:-------------------------------------------------------

# The binary executables
%{_bindir}/%{name}
# The man pages for the application
%{_mandir}/man?/%{name}*
# The datadir used by the application (probably usr/share/%{name}
#%{_datadir}/%{name}/
# Documentation for the package (this is the correct place)
# %doc /usr/share/doc/packages/%{name}/
# I think this puts the icon in the system's icon directory /usr/share/icons
%{_iconsdir}/%{name}.xpm
# These are two more icon directories for large and mini, respectively
#%{_liconsdir}/%{name}.xpm
#%{_miconsdir}/%{name}.xpm


#-----------------------------------------------------------------------------
# Postinstall section
# Purpose: Things to do after the install is complete
#-----------------------------------------------------------------------------
#%post
#-Section instructions:-------------------------------------------------------


#-----------------------------------------------------------------------------
# Postinstall section
# Purpose: Things to do after the install is complete
#-----------------------------------------------------------------------------
#%postun
#-Section instructions:-------------------------------------------------------

# We could run a program asking if want to delete the channel contents
# Not nice to delete without asking though.

#-----------------------------------------------------------------------------
# Changelog section
# Purpose: A description of any changes you have made to the package
# Notes: 
#  (1) Use a "*" character to start a new date entry and a "-" to add a
#      entry under that date.
#-----------------------------------------------------------------------------
%changelog -n %{name}
#-Section instructions:-------------------------------------------------------

* Tue Jul 09 2002 - rob@medicalmnemonics.com
- Initial RPM created

#-----------------------------------------------------------------------------
# Appendix: some design notes on this spec file: 
#  (1) $RPM_BUILD_ROOT is the same %{buildroot}. We used %{buildroot}
#      for consistency, that all RPM commands start with a % and %{} means
#      replace what is in brackets with a variable.
#-----------------------------------------------------------------------------